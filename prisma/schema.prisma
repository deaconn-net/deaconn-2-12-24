// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Article {
  id  Int    @id @default(autoincrement())
  url String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId Int?

  title   String
  desc    String?
  content String  @db.Text

  banner String?

  views           Int              @default(0)
  comments        Int              @default(0)
  articleComments ArticleComment[]
}

model ArticleComment {
  id Int @id @default(autoincrement())

  articleId Int
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  content String // @db.Text
}

model Service {
  id  Int    @id @default(autoincrement())
  url String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId Int?

  name     String
  price    Float   @default(0)
  desc     String?
  install  String? @db.Text
  features String? @db.Text
  content  String  @db.Text

  views     Int @default(0)
  purchases Int @default(0)
  downloads Int @default(0)

  icon   String?
  banner String?

  gitLink    String?
  openSource Boolean @default(true)

  requests Request[]
  Purchase Purchase[]
}

model Request {
  id Int @id @default(autoincrement())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  serviceId Int?
  service   Service? @relation(fields: [serviceId], references: [id], onDelete: NoAction)

  title     String?
  timeframe Int
  content   String    @db.Text
  startDate DateTime?
  price     Float

  accepted Boolean @default(false)
  status   Int     @default(0)

  replies RequestReply[]
}

model RequestReply {
  id Int @id @default(autoincrement())

  requestId Int
  request   Request @relation(fields: [requestId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  content String @db.Text
}

model Partner {
  id Int @id @default(autoincrement())

  name   String
  url    String
  banner String?
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  isBanned      Boolean   @default(false)
  email         String?   @unique
  emailVerified DateTime?
  accounts      Account[]
  sessions      Session[]

  credit Float @default(0)

  image     String?
  url       String?   @unique
  name      String?
  title     String?
  aboutMe   String?   @db.Text
  birthday  DateTime?
  showEmail Boolean   @default(false)
  isTeam    Boolean   @default(false)

  socialTwitter  String?
  socialGithub   String?
  socialLinkedin String?
  socialFacebook String?
  website        String?

  experiences UserExperience[]
  skills      UserSkill[]
  projects    UserProject[]

  roles UserRole[]

  Article        Article[]
  Request        Request[]
  ArticleComment ArticleComment[]
  RequestReply   RequestReply[]
  Purchase       Purchase[]
  UpdateLog      UpdateLog[]
  GitLog         GitLog[]
}

model UserExperience {
  id Int @id @default(autoincrement())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  startDate DateTime?
  endDate   DateTime?

  title   String
  desc    String?
  details String? @db.Text
}

model UserSkill {
  id Int @id @default(autoincrement())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  title String
  desc  String?
}

model UserProject {
  id Int @id @default(autoincrement())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  startDate DateTime?
  endDate   DateTime?

  name       String
  desc       String?
  details    String? @db.Text
  openSource Boolean @default(true)

  sources ProjectSource[]
}

model ProjectSource {
  projectId Int
  project   UserProject @relation(fields: [projectId], references: [id], onDelete: Cascade)

  title String @default("Source")
  url   String

  @@id([projectId, url])
}

model Role {
  id       String     @id
  title    String
  desc     String?
  UserRole UserRole[]
}

model UserRole {
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  roleId String
  role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id Int @id @default(autoincrement())

  parentId Int?
  parent   Category?  @relation("children", fields: [parentId], references: [id], onUpdate: Cascade, onDelete: NoAction)
  children Category[] @relation("children")

  url  String
  name String
  desc String?

  Article Article[]
  Service Service[]
}

model Purchase {
  id Int @id @default(autoincrement())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  serviceId Int
  service   Service @relation(fields: [serviceId], references: [id], onDelete: NoAction)

  transactionId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UpdateLog {
  id Int @id @default(autoincrement())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  msg String
}

model GitLog {
  id Int @id @default(autoincrement())

  createdAt DateTime @default(now())

  userId   String?
  user     User?   @relation(fields: [userId], references: [id], onDelete: SetNull)
  name     String?
  userName String?

  repoName   String
  repoBranch String
  commitId   String
  commitMsg  String
}
